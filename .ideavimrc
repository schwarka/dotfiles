"" Source your .vimrc
"source ~/.vimrc

"" ---------------------
"" Map leader to space
"" ---------------------
let mapleader=" "

"" ---------------------
"" Plugins
"" ---------------------
Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" In VISUAL mode, use `gr` to replace selection with clipboard text without overwriting clipboard
Plug 'vim-scripts/ReplaceWithRegister'

Plug 'vim-matchit'
set notimeout
set easymotion
set which-key

" Case-insensitive search
set ignorecase
set smartcase

let g:WhichKey_FontSize = 17

"" ---------------------
"" Settings
"" ---------------------
set scrolloff=10    " start scrolling before edge of screen
set incsearch       " search while typing
set number          " show line numbers
set relativenumber  " show relative line numbers
set colorcolumn=80

" Use system clipboard
set clipboard+=unnamed
set clipboard+=ideaput

set ideajoin
set idearefactormode=keep

"" ---------------------
"" Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" ---------------------

" Use \ for less used shortcuts
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \s :source ~/.ideavimrc<CR>
nnoremap \f :action ReformatCode<CR>

" View Settings
let g:WhichKeyDesc_view = "<leader>v View options"

let g:WhichKeyDesc_view_distraction_free = "<leader>vd Distraction Free Mode"
nnoremap <leader>vd :action ToggleDistractionFreeMode<CR>

let g:WhichKeyDesc_view_zen = "<leader>vz Toggle Zen Mode"
nnoremap <leader>vz :action ToggleZenMode<CR>

let g:WhichKeyDesc_view_fullscreen = "<leader>vf Toggle Fullscreen"
nnoremap <leader>vf :action ToggleFullScreen<CR>

let g:WhichKeyDesc_view_presentation = "<leader>vp Toggle Presentation Mode"
nnoremap <leader>vp :action TogglePresentationMode<CR>

" Tool Windows
let g:WhichKeyDesc_tools = "<leader>t Tool Windows"

let g:WhichKeyDesc_tools_terminal = "<leader>tt Terminal"
nnoremap <leader>tt :action ActivateTerminalToolWindow<CR>

let g:WhichKeyDesc_tools_last_window = "<leader>tp Last Window"
nnoremap <leader>tp :action JumpToLastWindow<CR>

let g:WhichKeyDesc_tools_find = "<leader>tf Find"
nnoremap <leader>tf :action ActivateFindToolWindow<CR>

let g:WhichKeyDesc_tools_file_explorer = "<leader>tx File Explorer"
nnoremap <leader>tx :NERDTree<CR>

let g:WhichKeyDesc_tools_run = "<leader>tr Run Window"
nnoremap <leader>tr :action ActivateRunToolWindow<CR>

let g:WhichKeyDesc_tools_debug = "<leader>td Debug Window"
nnoremap <leader>td :action ActivateDebugToolWindow<CR>

" Editor Window
let g:WhichKeyDesc_editor = "<leader>e Editor Window"

let g:WhichKeyDesc_editor_split = "<leader>es Split"
nnoremap <leader>es :action SplitVertically<CR>

let g:WhichKeyDesc_editor_unsplit = "<leader>eu Unsplit"
nnoremap <leader>eu :action Unsplit<CR>

let g:WhichKeyDesc_editor_move_opposite = "<leader>em Move Opposite"
nnoremap <leader>em :action MoveEditorToOppositeTabGroup<CR>

let g:WhichKeyDesc_editor_close = "<leader>eq Close Tab"
nnoremap <leader>eq :action CloseEditor<CR>

let g:WhichKeyDesc_editor_close_all = "<leader>eQ Close All Tabs"
nnoremap <leader>eQ :action CloseAllEditors<CR>

let g:WhichKeyDesc_editor_close_others = "<leader>eO Close Other Tabs"
nnoremap <leader>eO :action CloseAllEditorsButActive<CR>

" Tabs
let g:WhichKeyDesc_previous_tab = "<s-TAB> Previous Tab"
nnoremap <s-TAB> :action PreviousTab<CR>

let g:WhichKeyDesc_next_tab = "<TAB> Next Tab"
nnoremap <TAB> :action NextTab<CR>

" Navigate Between Editor Splits
sethandler <c-j> a:vim
sethandler <c-k> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k

" Source Code

nnoremap [[ :action MethodUp<CR>

nnoremap ]] :action MethodDown<CR>

nnoremap J :action MoveLineDown<CR>

nnoremap K :action MoveLineUp<CR>

nnoremap zc :action CollapseRegion<CR>

nnoremap zo :action ExpandRegion<CR>

nnoremap <leader>zc :action CollapseAllRegions<CR>

nnoremap <leader>zo :action ExpandAllRegions<CR>

nnoremap <leader>=  :action ReformatCode<CR>

nnoremap <leader>o :action OptimizeImports<CR>

nnoremap <leader>l :action RecentLocations<CR>

nnoremap <leader>h  :action LocalHistory.ShowHistory<CR>

nnoremap ge :action GotoNextError<CR>

nnoremap gE :action GotoPreviousError<CR>

nnoremap <leader>b :action Annotate<CR>

" Refactoring
nnoremap ev :action IntroduceVariable<CR>
nnoremap ec :action IntroduceConstant<CR>
nnoremap em :action ExtractMethod<CR>
nnoremap es :action ExtractSuperclass<CR>
nnoremap er :action RenameElement<CR>

" Code Navigation
nnoremap <leader>u :action FindUsages<CR>
nnoremap <leader>h :action CallHierarchy<CR>
nnoremap <leader>s :action FileStructurePopup<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gp :action GotoSuperMethod<CR>
nnoremap gt :action GotoTest<CR>
nnoremap gb :action Back<CR>
nnoremap gf :action Forward<CR>

" Run/Debug
let g:WhichKeyDesc_run = ",r Run"
nnoremap ,r :action RunClass<CR>

let g:WhichKeyDesc_run_config = ",c Choose Configuration"
nnoremap ,c :action ChooseRunConfiguration<CR>

let g:WhichKeyDesc_rerun = ",u Rerun"
nnoremap ,u :action Rerun<CR>

let g:WhichKeyDesc_breakpoint = ",b Toggle Breakpoint"
nnoremap ,b :action ToggleLineBreakpoint<CR>

let g:WhichKeyDesc_debug = ",d Debug"
nnoremap ,d :action DebugClass<CR>


" Git
let g:WhichKeyDesc_git = "<leader>g Git"

let g:WhichKeyDesc_git_stash = "<leader>gs Stash"
nnoremap <leader>gs :action Git.Stash<CR>

let g:WhichKeyDesc_git_unstash = "<leader>gu Unstash"
nnoremap <leader>gu :action Git.Unstash<CR>

let g:WhichKeyDesc_git_menu = "<leader>gm Menu"
nnoremap <leader>gm :action Git.Menu<CR>

let g:WhichKeyDesc_git_branches = "<leader>gb Branches"
nnoremap <leader>gb :action Git.Branches<CR>

let g:WhichKeyDesc_git_log = "<leader>gr Resolve Conflicts"
nnoremap <leader>gr :action Git.ResolveConflicts<CR>

" Project Navigation
let g:WhichKeyDesc_find = "<leader>f Find"

let g:WhichKeyDesc_find_project = "<leader>fp Project"
nnoremap <leader>fp :action ManageRecentProjects<CR>

" Easy Motion
let g:WhichKeyDesc_motion = "<leader>m Motion"

let g:WhichKeyDesc_motion_line = "<leader>ml Line"
map <leader>ml <Plug>(easymotion-bd-jk)

let g:WhichKeyDesc_motion_char = "<leader>mc Character"
map <leader>mc <Plug>(easymotion-bd-f)

let g:WhichKeyDesc_motion_word = "<leader>mw Word"
map <leader>mw <Plug>(easymotion-bd-w)

" AI Assistant
let g:WhichKeyDesc_motion = "<leader>a AI"

let g:WhichKeyDesc_toggle_assistant = "<leader>ac Chat"
nnoremap <leader>ac :action ActivateAIAssistantToolWindow<CR>

" Find more examples here: https://jb.gg/share-ideavimrc
